generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Gestion de Usuarios y Roles

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  roleId            String
  isVerified        Boolean   @default(false)
  deletedAt         DateTime?
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  role              Role                @relation(fields: [roleId], references: [id])
// articlesAuthored  AuthorsOnArticles[]
// reviewsAssigned   Review[]
// tasksAssigned     ProductionTask[]
// refreshTokens     RefreshToken[]
}

model Role {
  id    String   @id @default(cuid())
  name  RoleName @unique
  users User[]
}

enum RoleName {
  ADMIN
  DIRECTOR
  AUTHOR
  REVIEWER
  STYLISTIC_EDITOR
  DESIGNER
}

// Logica de Negocio
// Gestion de Articulos y Revisores

enum ArticleType {
  SCIENTIFIC_ARTICLE
  STUDENT_LOG
}

model Article {
  id        String        @id @default(cuid())
  title     String
  abstract  String
  status    ArticleStatus @default(PENDING_PRE_FILTERING)
  themeId   String?
  journalId String?

  type      ArticleType

  plagiarismScore      Int?
  aiContentPercentage  Int?
  plagiarismReportUrl  String?

  authors   AuthorsOnArticles[]
  versions  ArticleVersion[]
  theme     Theme?              @relation(fields: [themeId], references: [id])
  journal   Journal?            @relation(fields: [journalId], references: [id])
  tasks     ProductionTask[]

  forFutureJournal Boolean @default(false)
}

model AuthorsOnArticles {
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([userId, articleId])
}

model ArticleVersion {
  id             String   @id @default(cuid())
  fileUrl        String
  versionNotes   String?
  submissionDate DateTime @default(now())
  articleId      String
  isLatest       Boolean  @default(true)

  article Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Review {
  id                  String               @id @default(cuid())
  recommendation      ReviewRecommendation
  commentsForDirector String?
  commentsForAuthor   String?
  reviewerId          String
  articleVersionId    String

  reviewer       User           @relation(fields: [reviewerId], references: [id])
  articleVersion ArticleVersion @relation(fields: [articleVersionId], references: [id])
}
