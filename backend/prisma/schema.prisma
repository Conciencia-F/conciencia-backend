generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== Gestion de Usuarios y Roles ====================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  roleId            String
  isVerified        Boolean   @default(false)
  deletedAt         DateTime?
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  role              Role      @relation(fields: [roleId], references: [id])
  reviewsAssigned   Review[]
  tasksAssigned     ProductionTask[]
  refreshTokens     RefreshToken[]
  articlesUploaded  Article[] 
}

model Role {
  id    String   @id @default(cuid())
  name  RoleName @unique
  users User[]
}

enum RoleName {
  ADMIN
  DIRECTOR
  AUTHOR
  STUDENT
  INVESTIGATOR
  REVIEWER
  STYLISTIC_EDITOR
  DESIGNER
}

// ==================== Logica de Negocio ====================

enum ArticleType {
  SCIENTIFIC_ARTICLE
  STUDENT_LOG
}

model Article {
  id        String        @id @default(cuid())
  title     String
  abstract  String
  status    ArticleStatus @default(PENDING_PRE_FILTERING)
  themeId   String?
  journalId String?

  tags      String? 
  type      ArticleType

  plagiarismScore      Int?
  aiContentPercentage  Int?
  plagiarismReportUrl  String?

  userId   String
  user     User            @relation(fields: [userId], references: [id])
  authors  AuthorsOnArticles[]
  versions ArticleVersion[]
  theme    Theme?           @relation(fields: [themeId], references: [id])
  journal  Journal?         @relation(fields: [journalId], references: [id])
  tasks    ProductionTask[]
  images   ArticleImage[] 
  bibliographies Bibliography[]    // Nueva relación

  forFutureJournal Boolean @default(false)
  isManuscrit      Boolean @default(false) // Se maneja con trigger
}

model ArticleImage {
  id        String   @id @default(cuid())
  articleId String
  url       String
  article   Article  @relation(fields: [articleId], references: [id])
}

model AuthorsOnArticles {
  id          String   @id @default(cuid())
  articleId   String
  name        String
  email       String
  affiliation String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ArticleVersion {
  id             String   @id @default(cuid())
  fileUrl        String
  versionNotes   String?
  submissionDate DateTime @default(now())
  articleId      String
  isLatest       Boolean  @default(true)

  article Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Review {
  id                  String               @id @default(cuid())
  recommendation      ReviewRecommendation
  commentsForDirector String?
  commentsForAuthor   String?
  reviewerId          String
  articleVersionId    String

  reviewer       User           @relation(fields: [reviewerId], references: [id])
  articleVersion ArticleVersion @relation(fields: [articleVersionId], references: [id])
}

model ProductionTask {
  id          String      @id @default(cuid())
  type        TaskType
  status      TaskStatus  @default(PENDING)
  fileUrl     String?
  assigneeId  String

  createdAt   DateTime    @default(now())
  completedAt DateTime?

  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  assignee  User    @relation(fields: [assigneeId], references: [id])
}

model Journal {
  id              String    @id @default(cuid())
  title           String
  publicationDate DateTime
  finalPdfUrl     String?    
  articles        Article[]
}

model Theme {
  id       String        @id @default(cuid())
  category ThemeCategory @unique
  isActive Boolean       @default(false)
  articles Article[]
}

// Nueva tabla para Bibliografías
model Bibliography {
  id        String   @id @default(cuid())
  reference String   // texto de la bibliografía
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String   @id @default(cuid())
  hashedToken String   @unique
  userId      String
  revoked     Boolean  @default(false)

  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ==================== Enums ====================

enum ArticleStatus {
  PENDING_PRE_FILTERING
  ACCEPTED_FOR_PRELIMINARY_REVIEW
  ACCEPTED_FOR_FUTURE_JOURNAL
  REJECTED_BY_PRE_FILTERING
  PENDING_REVIEWER_ASSIGNMENT
  IN_REVIEW
  REVIEW_COMPLETED
  PENDING_AUTHOR_CORRECTIONS
  RESUBMITTED_PENDING_APPROVAL
  READY_FOR_STYLISTIC_EDITION
  IN_STYLISTIC_EDITION
  STYLISTIC_EDITION_COMPLETED
  READY_FOR_LAYOUT
  IN_LAYOUT
  LAYOUT_COMPLETED
  READY_FOR_FINAL_APPROVAL
  PUBLISHED
  REJECTED
}

enum ReviewRecommendation {
  FIT_FOR_STYLISTIC_EDITION
  REQUIRES_CORRECTIONS
}

enum TaskType {
  STYLISTIC_EDITION
  LAYOUT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ThemeCategory {
  INVESTIGACION_CIENTIFICA_Y_TECNOLOGICA     
  INNOVACION_Y_DESARROLLO_ID                 
  EDUCACION_CIENTIFICA_Y_TECNOLOGICA        
  CIENCIA_Y_SOCIEDAD                         
  POLITICAS_PUBLICAS_EN_CIENCIA_Y_TECNOLOGIA
  PRODUCCION_Y_DESARROLLO_LOCAL              
  JUVENTUD_INVESTIGADORA                     
  MUJERES_Y_DIVERSIDADES_EN_LA_CIENCIA      
  PERSPECTIVA_FORMOSENA                      
  RECENSIONES_Y_RESEÑA                        
  DESARROLLO_DE_SOFTWARE                     
  TELECOMUNICACIONES                           
  MECATRONICA                                 
  QUIMICA_INDUSTRIAL                          
}

